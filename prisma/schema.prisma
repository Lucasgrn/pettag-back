// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  instagram    String        @unique
  phone        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  Pet          Pet[]
  userLocation userLocation?

  @@map("users")
}

model Pet {
  id            String     @id @default(uuid())
  token         String     @unique
  species       String
  race          String
  name          String
  birthday      DateTime
  bio           String?
  friendly      Boolean    @default(false)
  vaccinated    Boolean    @default(false)
  dewormed      Boolean    @default(false)
  favoriteSnack String
  diaryFood     String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  owner         User       @relation(fields: [ownerId], references: [id])
  ownerId       String
  Location      Location[]
  Tag           Tag?

  @@map("pets")
}

model Location {
  id        String   @id @default(uuid())
  street    String
  number    String
  area      String
  zipCode   String
  createdAt DateTime @default(now())
  pet       Pet      @relation(fields: [petId], references: [id])
  petId     String

  @@map("locations")
}

model userLocation {
  id        String   @id @default(uuid())
  street    String
  number    String
  area      String
  zipCode   String
  reference String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("userLocations")
}

model Tag {
  id        String   @id @default(uuid())
  status    Status   @default(inactive)
  Pet       Pet?     @relation(fields: [petId], references: [id])
  petId     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("tags")
}

enum Status {
  active
  inactive
}
